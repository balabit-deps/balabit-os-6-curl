Backport of:

From baf34f6f6916cacfdf9ac01bac27e483f68ca4f6 Mon Sep 17 00:00:00 2001
From: Daniel Stenberg <daniel@haxx.se>
Date: Fri, 10 Nov 2017 08:52:45 +0100
Subject: [PATCH] wildcardmatch: fix heap buffer overflow in setcharset

The code would previous read beyond the end of the pattern string if the
match pattern ends with an open bracket when the default pattern
matching function is used.

Detected by OSS-Fuzz:
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=4161
---
 lib/curl_fnmatch.c      |  9 +++------
 tests/data/Makefile.inc |  2 +-
 tests/data/test1163     | 52 +++++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 56 insertions(+), 7 deletions(-)
 create mode 100644 tests/data/test1163

Index: curl-7.47.0/lib/curl_fnmatch.c
===================================================================
--- curl-7.47.0.orig/lib/curl_fnmatch.c	2017-11-28 08:04:33.656555386 -0500
+++ curl-7.47.0/lib/curl_fnmatch.c	2017-11-28 08:04:33.652555335 -0500
@@ -131,6 +131,9 @@ static int setcharset(unsigned char **p,
   unsigned char c;
   for(;;) {
     c = **p;
+    if(!c)
+      return SETCHARSET_FAIL;
+
     switch(state) {
     case CURLFNM_SCHS_DEFAULT:
       if(ISALNUM(c)) { /* ASCII value */
@@ -195,9 +198,6 @@ static int setcharset(unsigned char **p,
         else
           return SETCHARSET_FAIL;
       }
-      else if(c == '\0') {
-        return SETCHARSET_FAIL;
-      }
       else {
         charset[c] = 1;
         (*p)++;
@@ -276,9 +276,6 @@ static int setcharset(unsigned char **p,
       else if(c == ']') {
         return SETCHARSET_OK;
       }
-      else if(c == '\0') {
-        return SETCHARSET_FAIL;
-      }
       else if(ISPRINT(c)) {
         charset[c] = 1;
         (*p)++;
Index: curl-7.47.0/tests/data/Makefile.inc
===================================================================
--- curl-7.47.0.orig/tests/data/Makefile.inc	2017-11-28 08:04:33.656555386 -0500
+++ curl-7.47.0/tests/data/Makefile.inc	2017-11-28 08:04:56.148848968 -0500
@@ -120,7 +120,7 @@ test1112 test1113 test1114 test1115 test
 test1120 test1121 test1122 test1123 test1124 test1125 test1126 test1127 \
 test1128 test1129 test1130 test1131 test1132 test1133 test1134 test1135 \
 test1136 test1137 test1138 test1440 test1441 \
-test1152 \
+test1152 test1163 \
 \
 test1200 test1201 test1202 test1203 test1204 test1205 test1206 test1207 \
 test1208 test1209 test1210 test1211 test1212 test1213 test1214 test1215 \
Index: curl-7.47.0/tests/data/test1163
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ curl-7.47.0/tests/data/test1163	2017-11-28 08:04:33.656555386 -0500
@@ -0,0 +1,52 @@
+<testcase>
+<info>
+<keywords>
+FTP
+RETR
+LIST
+wildcardmatch
+ftplistparser
+flaky
+</keywords>
+</info>
+
+#
+# Server-side
+<reply>
+<data>
+</data>
+</reply>
+
+# Client-side
+<client>
+<server>
+ftp
+</server>
+<tool>
+lib576
+</tool>
+<name>
+FTP wildcard with pattern ending with an open-bracket
+</name>
+<command>
+"ftp://%HOSTIP:%FTPPORT/fully_simulated/DOS/*[]["
+</command>
+</client>
+<verify>
+<protocol>
+USER anonymous
+PASS ftp@example.com
+PWD
+CWD fully_simulated
+CWD DOS
+EPSV
+TYPE A
+LIST
+QUIT
+</protocol>
+# 78 == CURLE_REMOTE_FILE_NOT_FOUND
+<errorcode>
+78
+</errorcode>
+</verify>
+</testcase>
